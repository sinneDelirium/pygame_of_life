import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.PrintWriter;
import java.io.FileNotFoundException;

// Refactor GoL to own file
// Make much larger grid that is draggable and zoomable

/**
 * <h1>Game of Life</h1>
 * The Game of Life program implements John Conway's Game of Life
 * using Java JFrames and JApplets.
 *
 * @author  Dennis Gorman
 * @version 1.0
 * @since   11-25-2023
 * @see     <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway's Game of Life</a>
 */




public class Main {
    /**
     * Runs the game.
     * @param args Unused.
     */
    public static void main(String[] args) {
        initGame();
    }

    public static void initGame() {
        JFrame f = new JFrame("Game of Life");
        f.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {System.exit(0);}
        });
        JApplet game = new GoL();
        f.getContentPane().add("Center", game);
        game.init();
        f.pack();
        f.setSize(new Dimension(600,600));
        f.setVisible(true);
        f.setResizable(false);
    }
}

class GoL extends JApplet {
    // Fields
    private int[][] grid;
    File seed;
    final static int timeStep = 1000;
    final static int rectWidth = 30, rectHeight = 30;
    final static int borderThickness = 1;
    final static Color bg = Color.white;
    final static Color fg = Color.black;
    final static Color red = Color.red;
    final static Color white = Color.white;

    // Getters and setters
    public int[][] getGrid() {
        return grid;
    }

    public void setGrid(int[][] grid) {
        this.grid = grid;
    }

    public File getSeed() {
        return seed;
    }

    public void setSeed(File seed) {
        this.seed = seed;
    }

    // Constructors
    public GoL() {
        this.seed = new File("/maps/still_life/block.txt");
    }

    public GoL(File seed) {
        this.seed = seed;
    }

    // Public methods
    public void init() {
        // Initialize drawing colors
        setBackground(bg);
        setForeground(fg);
    }

    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        int x = 0, y = 0;

        // Main menu
            // Select map
            // Create map
            // Exit

        // Draw grid outline

        // Read from file

        // Game loop
            // Check neighbors
            // Update grid
            // Draw grid
                // Will need to add size to keep number of cells
            // Add buttons
                // Add text and color
                // Center map button
                // Add action listeners
            // Listen for mouse
                // Zoom in and out
                // Drag map
            // Thread.sleep();

        // Request write to file before exit
        g2.setPaint(red);
        g2.draw(new Rectangle2D.Double(x, y, rectWidth, rectHeight));
        g2.fill(new Rectangle2D.Double(x, y, rectWidth, rectHeight));
    }

    public void writeZerosToFile() {
        // Write zeros to file
        // Like base.txt
    }

    // Private methods
    private int checkUnderpopulation(int[][] grid) {
        // Any live cell with fewer than two live neighbours dies,
        // as if by underpopulation.
        return 0;
    }

    private int checkNextGeneration(int[][] grid) {
        // Any live cell with two or three live neighbours
        // lives on to the next generation.
        return 0;
    }

    private int checkOverpopulation(int[][] grid) {
        // Any live cell with more than three live neighbours dies,
        // as if by overpopulation.
        return 0;
    }

    private int checkReproduction(int[][] grid) {
        // Any dead cell with exactly three live neighbours
        // becomes a live cell, as if by reproduction
        return 0;
    }

    private void readFromFile() {
        // Read from file
    }
}
